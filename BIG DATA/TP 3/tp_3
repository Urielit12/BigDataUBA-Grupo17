import matplotlib.patches as mpatches
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import norm
from sklearn.neighbors import KernelDensity


def limpieza_general():
    ind2004 = pd.read_stata('individual_t104.dta')
    ind2024 = pd.read_excel('usu_individual_T124.xlsx')
    ind2004.set_index('CODUSU', inplace=True)
    ind2024.set_index('CODUSU', inplace=True)
    ind2024 = ind2024.loc[:, ~ind2024.columns.str.contains("CH05")]
    ind2004.columns = ind2004.columns.str.upper()

    cols_2004 = set(ind2004.columns)
    cols_2024 = set(ind2024.columns)

    sobran_2004 = cols_2004 - cols_2024
    sobran_2024 = cols_2024 - cols_2004
    ind2004 = ind2004.drop(columns=sobran_2004)
    ind2024 = ind2024.drop(columns=sobran_2024)

    if ind2024.shape[1] == ind2004.shape[1]:
        print(
            f"Igual cantidad de columnas: {ind2004.shape[1]}")
    else:
        print(
            f'No son iguales: 2024: {ind2024.shape[1]}, 2004:{ind2004.shape[1]}')
    print(f"Cant. filas 2004: {ind2004.shape[0]}")
    print(f"Cant. filas 2024: {ind2024.shape[0]}")

    ind2004.to_excel('LimpioINDT12004.xlsx')
    ind2024.to_excel('LimpioINDT12024.xlsx')
    print("Archivos exportados a Excel.")


limpieza_general()


def limpieza_edad():
    ind2004 = pd.read_excel('LimpioINDT12004.xlsx')
    # En el año 2004, para la variable CH06, hay valores que no son edad en tipo int.
    valores_unicos_2004 = ind2004['CH06'][~ind2004['CH06'].apply(
        lambda x: isinstance(x, (int, float)))].unique()
    print("Valores no numéricos únicos en CH06 (2004):")
    print(valores_unicos_2004)

    ind2004['CH06'] = ind2004['CH06'].astype(str)
    ind2004['CH06'] = ind2004['CH06'].replace({
        'Menos de 1 año': 0.9,
        '98 y más años': 99})
    ind2004['CH06'] = pd.to_numeric(ind2004['CH06'], errors='coerce')
    print('Valores de edad corregidos.')
    ind2004.to_excel('LimpioINDT12004.xlsx')


limpieza_edad()


def limpieza_estado():

    ind2004 = pd.read_excel('LimpioINDT12004.xlsx')
    ind2024 = pd.read_excel('LimpioINDT12024.xlsx')

    valores_unicos_2004 = ind2004['ESTADO'][~ind2004['ESTADO'].apply(
        lambda x: isinstance(x, (int, float)))].unique()
    print(
        f"Valores no numéricos únicos en ESTADO (2004):{valores_unicos_2004}")

    ind2004['ESTADO'] = ind2004['ESTADO'].astype(str)
    ind2004['ESTADO'] = ind2004['ESTADO'].replace({
        'Ocupado': 1,
        'Desocupado': 2,
        'Inactivo': 3,
        'Menor de 10 años': 4,
        'Entrevista individual no realizada (no respuesta al cuestion': 0})
    ind2004['ESTADO'] = pd.to_numeric(ind2004['ESTADO'], errors='coerce')

    valores_unicos_2024 = ind2024['ESTADO'][~ind2024['ESTADO'].apply(
        lambda x: isinstance(x, (int, float)))].unique()
    print(
        f"Valores no numéricos únicos en ESTADO (2024):{valores_unicos_2024}")

    print(f'Valores en ESTADO 2004:{ind2004['ESTADO'].unique()}')
    print(f'Tipo de valores: {ind2004['ESTADO'].dtype}')

    ind2004.to_excel('LimpioINDT12004.xlsx')
    print('Limpieza guardada.')


limpieza_estado()

# Luego de la limpieza, realizamos lo pedido:


def edad2():
    ind2004 = pd.read_excel('LimpioINDT12004.xlsx')
    ind2024 = pd.read_excel('LimpioINDT12024.xlsx')

    ind2004['edad2'] = np.square(ind2004['CH06'])
    ind2024['edad2'] = np.square(ind2024['CH06'])

    print(ind2004['edad2'])
    print(ind2024['edad2'])


edad2()


def histograma_kernels():
    # Cargamos datos.
    ind2004 = pd.read_excel('LimpioINDT12004.xlsx')
    ind2024 = pd.read_excel('LimpioINDT12024.xlsx')

    # Variables.
    ocupados2004 = ind2004.loc[ind2004['ESTADO'] == 1, 'CH06']
    desocupados2004 = ind2004.loc[ind2004['ESTADO'] == 2, 'CH06']
    ocupados2024 = ind2024.loc[ind2024['ESTADO'] == 1, 'CH06']
    desocupados2024 = ind2024.loc[ind2024['ESTADO'] == 2, 'CH06']
    ind2004 = ind2004[['CH06']].copy()
    ind2024 = ind2024[['CH06']].copy()
    ind2004['Año'] = '2004'
    ind2024['Año'] = '2024'
    combined = pd.concat([ind2004, ind2024], ignore_index=True)
    promedio_2004 = np.mean(ind2004['CH06'])
    promedio_2024 = np.mean(ind2024['CH06'])

    # Figura.
    fig, axes = plt.subplots(1, 2, figsize=(10, 6))

    # Histograma.
    sns.histplot(data=combined, x='CH06', ax=axes[0],
                 hue='Año', bins=25, multiple='stack',
                 palette={'2004': '#5799c6', '2024': 'orange'})
    axes[0].set_title('Distribución de edad EPH 2004/2024')
    axes[0].set_xlabel('Edad')
    axes[0].set_ylabel('Frecuencia')
    axes[0].axvline(promedio_2004, linestyle='dashed',
                    linewidth=1, color='red')
    axes[0].axvline(promedio_2024, linestyle='dashed',
                    linewidth=1, color='green')
    axes[0].set_xticks(np.arange(0, 101, 10))
    # Parches para el label de la esquina superior derecha.
    parche_2004 = mpatches.Patch(color='#5799c6', label='2004')
    parche_2024 = mpatches.Patch(color='orange', label='2024')
    patch_prom04 = mpatches.Patch(color='red', label='Promedio 2004')
    patch_prom24 = mpatches.Patch(color='green', label='Promedio 2024')
    axes[0].legend(handles=[parche_2004, parche_2024, patch_prom04,
                   patch_prom24], title='Año y Promedios')

    # Kernels.
    sns.kdeplot(ocupados2004, ax=axes[1], label='Ocupados 2004',
                fill=True, color='red', bw_method='scott')
    sns.kdeplot(desocupados2004, ax=axes[1], label='Desocupados 2004',
                fill=True, color='grey', bw_method='scott')
    sns.kdeplot(ocupados2024, ax=axes[1], label='Ocupados 2024',
                fill=True, color='green', bw_method='scott', linestyle='dashed')
    sns.kdeplot(desocupados2024, ax=axes[1], label='Desocupados 2024',
                fill=True, color='grey', bw_method='scott', linestyle='dashed')
    axes[1].set_title('Estimación de Edad por Estado Laboral (2004 vs 2024)')
    axes[1].set_xlabel('Edad')
    axes[1].set_ylabel('Densidad estimada')
    axes[1].legend(title='Grupo')

    plt.tight_layout()
    plt.show()


histograma_kernels()
