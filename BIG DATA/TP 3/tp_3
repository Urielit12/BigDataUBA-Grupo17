from matplotlib.lines import Line2D
import matplotlib.patches as mpatches
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import norm
from sklearn.neighbors import KernelDensity

# Funcion de limpieza general: Creamos una unica base completa en un excel, con mismas columnas y en el mismo orden.


def limpieza_general():
    ind2004 = pd.read_stata('individual_t104.dta')
    ind2024 = pd.read_excel('usu_individual_T124.xlsx')
    ind2004.set_index('CODUSU', inplace=True)
    ind2024.set_index('CODUSU', inplace=True)
    ind2024 = ind2024.loc[:, ~ind2024.columns.str.contains("CH05")]
    ind2004.columns = ind2004.columns.str.upper()

    cols_2004 = set(ind2004.columns)
    cols_2024 = set(ind2024.columns)

    sobran_2004 = cols_2004 - cols_2024
    sobran_2024 = cols_2024 - cols_2004
    ind2004 = ind2004.drop(columns=sobran_2004)
    ind2024 = ind2024.drop(columns=sobran_2024)

    if ind2024.shape[1] == ind2004.shape[1]:
        print(
            f"Igual cantidad de columnas: {ind2004.shape[1]}")
    else:
        print(
            f'No son iguales: 2024: {ind2024.shape[1]}, 2004:{ind2004.shape[1]}')

    ind2024 = ind2024[ind2004.columns]

    base_completa = pd.concat([ind2004, ind2024], axis=0)
    variables_elegidas = ['ANO4', 'ESTADO', 'CH04', 'CH06', 'CH10', 'CH12', 'CH13', 'CH14', 'PP04A', 'PP04B_COD',
                          'PP07C', 'CAT_INAC', 'P21', 'PP3E_TOT', 'PP3F_TOT']
    base_completa = base_completa[variables_elegidas]
    base_completa.to_excel('BaseLimpiaEPH.xlsx', index=False)

    print("Archivo exportado a Excel.")


limpieza_general()

# Limpiamos la variable "CH06" (Edad) para que solo tenga valores numéricos.


def limpieza_edad():
    ind2004 = pd.read_excel('BaseLimpiaEPH.xlsx')
    valores_unicos_2004 = ind2004['CH06'][~ind2004['CH06'].apply(
        lambda x: isinstance(x, (int, float)))].unique()
    print("Valores no numéricos únicos en CH06 (2004):")
    print(valores_unicos_2004)

    año2004 = ind2004['ANO4'] == 2004
    no_numeros = ind2004.loc[año2004, 'CH06'][~ind2004.loc[año2004, 'CH06']
                                              .apply(lambda x: isinstance(x, (int, float)))].unique()
    print("Valores no numéricos únicos en CH06 (2004):", no_numeros)

    reemplazos = {'Menos de 1 año': 1, '98 y más años': 99}
    series_2004 = ind2004.loc[año2004, 'CH06'].astype(str).replace(reemplazos)
    ind2004.loc[año2004, 'CH06'] = pd.to_numeric(series_2004, errors='coerce')

    print('Valores de edad corregidos solo para 2004.')
    ind2004.to_excel('BaseLimpiaEPH.xlsx', index=False)
    print('Archivo guardado')


limpieza_edad()

# Limpiamos la variable "Estado" para que solo tenga valores numéricos en cuanto a la ocupación, desocupación y otros resultados.


def limpieza_estado():
    Est = pd.read_excel('BaseLimpiaEPH.xlsx')

    valores_unicos_2004 = Est['ESTADO'][~Est['ESTADO'].apply(
        lambda x: isinstance(x, (int, float)))].unique()
    print(
        f"Valores no numéricos únicos en ESTADO (2004):{valores_unicos_2004}")

    Est['ESTADO'] = Est['ESTADO'].astype(str)
    Est['ESTADO'] = Est['ESTADO'].replace({
        'Ocupado': 1,
        'Desocupado': 2,
        'Inactivo': 3,
        'Menor de 10 años': 4,
        'Entrevista individual no realizada (no respuesta al cuestion': 0})
    Est['ESTADO'] = pd.to_numeric(Est['ESTADO'], errors='coerce')

    print(f'Valores en ESTADO 2004:{Est['ESTADO'].unique()}')
    print(f'Tipo de valores: {Est['ESTADO'].dtype}')

    Est.to_excel('BaseLimpiaEPH.xlsx', index=False)
    print('Limpieza guardada.')


limpieza_estado()

# Luego de la limpieza, realizamos lo pedido:
# Creamos la variable "edad2", que es todas las edades elevadas al cuadrado, y añadimos la columna a la base.


def edad2():
    var_nueva = pd.read_excel('BaseLimpiaEPH.xlsx')
    var_nueva['edad2'] = np.square(var_nueva['CH06'])
    var_nueva.to_excel('BaseLimpiaEPH.xlsx')
    print('Nueva variable edad2 añadida.')


edad2()

# Creamos una función que, sobre la base general, crea un histograma de edades y un kernels de ocupados/desocupados.


def histo_kernel():
    df = pd.read_excel('BaseLimpiaEPH.xlsx')

    # Variables para el Histograma.
    edades2004 = df.loc[df['ANO4'] == 2004, 'CH06']
    edades2024 = df.loc[df['ANO4'] == 2024, 'CH06']
    df2004 = pd.DataFrame({'CH06': edades2004, 'ANO4': '2004'})
    df2024 = pd.DataFrame({'CH06': edades2024, 'ANO4': '2024'})
    combinado_edades = pd.concat([df2004, df2024], ignore_index=True)
    promedio_2004 = edades2004.mean()
    promedio_2024 = edades2024.mean()

    # Figura.
    fig, axes = plt.subplots(1, 2, figsize=(10, 6))

    # Histograma.
    sns.histplot(data=combinado_edades, x='CH06', ax=axes[0], hue='ANO4', bins=25, multiple='stack', palette={
        '2004': '#5799c6', '2024': 'orange'})
    axes[0].set_title('Distribución de edad EPH 2004/2024')
    axes[0].set_xlabel('Edad')
    axes[0].set_ylabel('Frecuencia')
    axes[0].axvline(promedio_2004, linestyle='dashed',
                    linewidth=1, color='red')
    axes[0].axvline(promedio_2024, linestyle='dashed',
                    linewidth=1, color='green')
    axes[0].set_xticks(np.arange(0, 101, 10))
    # Se usa patches y line2D para personalizar los labels.
    parche_2004 = mpatches.Patch(color='#5799c6', label='2004')
    parche_2024 = mpatches.Patch(color='orange', label='2024')
    line_prom04 = Line2D([0], [0], color='red',
                         linestyle='--', label='Promedio 2004')
    line_prom24 = Line2D([0], [0], color='green',
                         linestyle='--', label='Promedio 2024')
    axes[0].legend(handles=[parche_2004, parche_2024, line_prom04,
                            line_prom24], title='Año y Promedios')

    # Kernels.
    ocu2004 = df.loc[(df['ESTADO'] == 1) & (
        # Filtramos el Estado para ocupados/desocupados, y 2004/2024.
        df['ANO4'] == 2004), 'CH06']
    desoc2004 = df.loc[(df['ESTADO'] == 2) & (
        df['ANO4'] == 2004), 'CH06']
    ocu2024 = df.loc[(df['ESTADO'] == 1) & (
        df['ANO4'] == 2024), 'CH06']
    desoc2024 = df.loc[(df['ESTADO'] == 2) & (
        df['ANO4'] == 2024), 'CH06']
    sns.kdeplot(ocu2004, ax=axes[1], label='Ocupados 2004',
                fill=True, color='red', bw_method='scott')
    sns.kdeplot(desoc2004, ax=axes[1], label='Desocupados 2004',
                fill=True, color='grey', bw_method='scott')
    sns.kdeplot(ocu2024, ax=axes[1], label='Ocupados 2024',
                fill=True, color='green', bw_method='scott', linestyle='dashed')
    sns.kdeplot(desoc2024, ax=axes[1], label='Desocupados 2024',
                fill=True, color='grey', bw_method='scott', linestyle='dashed')
    axes[1].set_title('Estimación de Edad por Estado Laboral 2004/2024')
    axes[1].set_xlabel('Edad')
    axes[1].set_ylabel('Densidad estimada')
    axes[1].legend(title='Grupo')

    plt.tight_layout()
    plt.show()
    plt.savefig('Histo_Kernels.png')


histo_kernel()

# Limpiamos base en las variables "CH10", "CH12", "CH13" y "CH14" para crear la variable "educ" (Cant. de años de educación.)


def educ_limpieza():
    df = pd.read_excel('BaseLimpiaEPH.xlsx')
    df['CH10'] = df['CH10'].astype(str)
    df['CH10'] = df['CH10'].replace({
        'No asiste, pero asistió': 2,
        'Sí, asiste': 1,
        'Nunca asistió': 3,
        'Ns./Nr.': 9})
    df['CH10'] = pd.to_numeric(df['CH10'], errors='coerce')

    df['CH12'] = df['CH12'].astype(str).dropna()
    df['CH12'] = df['CH12'].replace({
        'Secundario': 4,
        'Primario': 2,
        'Universitario': 7,
        'Terciario': 6,
        'Jardín/Preescolar': 1,
        'Polimodal': 5,
        'EGB': 3,
        'Educación especial (discapacitado)': 9,
        'Ns./Nr.': 9,
        '99': 9})
    df['CH12'] = pd.to_numeric(df['CH12'], errors='coerce')

    df['CH13'] = df['CH13'].astype(str)
    df['CH13'] = df['CH13'].replace({
        'No': 2,
        'Sí': 1,
        'Ns./Nr.': 9})
    df['CH13'] = pd.to_numeric(df['CH13'], errors='coerce')

    df['CH14'] = df['CH14'].replace({i: f'0{i}' for i in range(0, 10)})
    df['CH14'] = pd.to_numeric(df['CH14'], errors='coerce')

    df = df.dropna()

    # Chequeamos los valores unicos de cada variable luego de limpiar.
    print(f'Valores en CH10:{df['CH10'].unique()}')
    print(f'Valores en CH12:{df['CH12'].unique()}')
    print(f'Valores en CH13:{df['CH13'].unique()}')
    print(f'Valores en CH14:{df['CH14'].unique()}')

    # Creamos una función que, en caso de que asista o hayaa asistido a alguna institución de educación, -
    # nos devuelva distintos valores en cada una. Si asiste o asistió a secundaria como última institución -
    # se hace 6 (Por primaria) + el último año cursado.

    def educ(row):
        if row['CH10'] in [1, 2]:  # Si asiste o asistió a alguna institución:
            if row['CH14'] in [99, 98]:
                # Educación especial, devuelvo 6 al no conocer cuantos años es su educación.
                return 6
            else:
                # No contamos jardín como años de educación.
                if row['CH12'] == 1:
                    return 0
                # Primaria, al consultar por ultimo año cursado, esa es su cantidad de años.
                elif row['CH12'] == 2:
                    return row['CH14']
                # EGB, cant. de años maximo es 8, dirá los años cursados en su respuesta de 'CH14
                elif row['CH12'] == 3:
                    return row['CH14']
                # Secundaria, 6 de primaria + ultimo año cursado.
                elif row['CH12'] == 4:
                    return 6 + row['CH14']
                # Polimodal, 8 años de EGB + ultimo año cursado.
                elif row['CH12'] == 5:
                    return 8 + row['CH14']
                # Terciario, 12 años de primaria y secundaria + ultimo año cursado.
                elif row['CH12'] == 6:
                    return 12 + row['CH14']
                elif row['CH12'] == 7:  # Univ, lo mismo que terciario.
                    return 12 + row['CH14']
                # Posgrado, asumo 5 años de educación universitaria: 17 + ultimo año cursado
                elif row['CH12'] == 8:
                    return 17 + row['CH14']
                elif row['CH12'] == 9:  # Ed. especial, asumo 6.
                    return 6
                else:
                    return None
        elif row['CH10'] == 3:  # Si nunca asistió, 0 años de educación.
            return 0
        else:
            return None
    df['educ'] = df.apply(educ, axis=1)
    df.to_excel('BaseLimpiaEPH.xlsx', index=False)  # Guardamos la variable.
    print('Variable "educ" añadida.')


educ_limpieza()

# Estadística descriptiva de la variable educ.


def est_descriptiva_educ():
    df = pd.read_excel('BaseLimpiaEPH.xlsx')
    media = np.mean(df['educ']).round(2)
    var = np.var(df['educ'], ddof=1).round(2)
    desv = np.sqrt(var).round(2)
    min = np.min(df['educ'])
    p50 = np.percentile(df['educ'], 50)
    max = np.max(df['educ'])

    print(f'La media de años de educación es: {media}')
    print(f'La varianza de años de educación es: {var}')
    print(f'El desvío de años de educación es: {desv}')
    print(f'El mínimo de años de educación es: {min}')
    print(f'El máximo de años de educación es: {max}')
    print(f'El percentil 50 de años de educación es: {p50}')


est_descriptiva_educ()

# Para poder comparar el ingreso semanal de 2004 al de 2024, decidimos compararlos teniendo en base el aumento-
# del salario minimo vital y móvil:

# Fuente del salario minimo vital y movil 2004 Marzo: https://eco.mdp.edu.ar/cendocu/repositorio/00210-d.pdf
# Fuente del salario minimo vital y movil 2024 Marzo: https://www.boletinoficial.gob.ar/detalleAviso/primera/302927/20240222

# Salario mínimo vital y movil 2004 Marzo (en pesos): $350
# Salario mínimo vital y movil 2004 Marzo (en pesos): $202.800


def salario_semanal():
    SMVM2004 = 350
    SMVM2024 = 202800
    pp = round(SMVM2024 / SMVM2004, 2)
    print(f'El SMVM de 2024T1 es {pp} veces el SMVM de 2004T1')

    df = pd.read_excel('BaseLimpiaEPH.xlsx')
    df.loc[(df['ANO4'] == 2004) & (df['P21'] > 0), 'salario_semanal'] = (
        df.loc[(df['ANO4'] == 2004) & (df['P21'] > 0), 'P21'] * pp / 21.65) * 5
    df.loc[(df['ANO4'] == 2024) & (df['P21'] > 0), 'salario_semanal'] = ((
        df.loc[(df['ANO4'] == 2024) & (df['P21'] > 0), 'P21']) / 21.65) * 5
    df.to_excel('BaseLimpiaEPH.xlsx', index=False)
    print('Ajuste hecho')
    prom_2004 = np.mean((df.loc[(df['ANO4'] == 2004) & (
        df['salario_semanal'] != 0), 'salario_semanal']) * 4.33)
    prom_2024 = np.mean(df.loc[(df['ANO4'] == 2024) & (df['P21'] != 0), 'P21'])

    # Chequeamos los promedios para verificar que las cantidades no sean absurdas tras el ajuste.
    print(f"Promedio 2004 ajustado: {round(prom_2004, 2)}")
    print(f"Promedio 2024: {round(prom_2024, 2)}")

    # Variables para el Histograma.
    sal_sem04 = df.loc[df['ANO4'] == 2004, 'salario_semanal'].dropna()
    sal_sem24 = df.loc[df['ANO4'] == 2024, 'salario_semanal'].dropna()
    df2004 = pd.DataFrame({'salario_semanal': sal_sem04, 'ANO4': '2004'})
    df2024 = pd.DataFrame({'salario_semanal': sal_sem24, 'ANO4': '2024'})
    combinado = pd.concat([df2004, df2024], ignore_index=True)
    combinado_filtrado = combinado[combinado['salario_semanal']
                                   < combinado['salario_semanal'].quantile(0.99)]
    prom04 = combinado_filtrado.loc[combinado_filtrado['ANO4']
                                    == '2004', 'salario_semanal'].mean()
    prom24 = combinado_filtrado.loc[combinado_filtrado['ANO4']
                                    == '2024', 'salario_semanal'].mean()

    # Figura.
    fig, axes = plt.subplots(1, 2, figsize=(10, 6))

    # Histograma.
    sns.histplot(data=combinado_filtrado, x='salario_semanal', ax=axes[0], hue='ANO4', bins=25, multiple='stack', palette={
        '2004': '#5799c6', '2024': 'orange'})
    axes[0].set_title('Distribución de salarios semanales EPH 2004/2024')
    axes[0].set_xlabel('Salario Semanal (en pesos)')
    axes[0].set_ylabel('Frecuencia')
    axes[0].axvline(prom04, linestyle='dashed',
                    linewidth=1, color='red')
    axes[0].axvline(prom24, linestyle='dashed',
                    linewidth=1, color='green')
    axes[0].set_xticks(np.arange(0, 30001, 5000))
    # Se usa patches y line2D para personalizar los labels.
    parche_2004 = mpatches.Patch(color='#5799c6', label='2004')
    parche_2024 = mpatches.Patch(color='orange', label='2024')
    line_prom04 = Line2D([0], [0], color='red',
                         linestyle='--', label='Promedio 2004')
    line_prom24 = Line2D([0], [0], color='green',
                         linestyle='--', label='Promedio 2024')
    axes[0].legend(handles=[parche_2004, parche_2024, line_prom04,
                            line_prom24], title='Año y Promedios')

    # Kernels. Filtramos el Estado para ocupados/desocupados, y 2004/2024.
    ocu2004 = df.loc[(df['ESTADO'] == 1) & (
        df['ANO4'] == 2004), 'CH06']
    desoc2004 = df.loc[(df['ESTADO'] == 2) & (
        df['ANO4'] == 2004), 'CH06']
    ocu2024 = df.loc[(df['ESTADO'] == 1) & (
        df['ANO4'] == 2024), 'CH06']
    desoc2024 = df.loc[(df['ESTADO'] == 2) & (
        df['ANO4'] == 2024), 'CH06']
    sns.kdeplot(ocu2004, ax=axes[1], label='Ocupados 2004',
                fill=True, color='red', bw_method='scott')
    sns.kdeplot(desoc2004, ax=axes[1], label='Desocupados 2004',
                fill=True, color='grey', bw_method='scott')
    sns.kdeplot(ocu2024, ax=axes[1], label='Ocupados 2024',
                fill=True, color='green', bw_method='scott', linestyle='dashed')
    sns.kdeplot(desoc2024, ax=axes[1], label='Desocupados 2024',
                fill=True, color='grey', bw_method='scott', linestyle='dashed')
    axes[1].set_title('Estimación de Edad por Estado Laboral 2004/2024')
    axes[1].set_xlabel('Edad')
    axes[1].set_ylabel('Densidad estimada')
    axes[1].legend(title='Grupo')

    plt.tight_layout()
    plt.show()


salario_semanal()
