from matplotlib.lines import Line2D
import matplotlib.patches as mpatches
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import norm
from sklearn.neighbors import KernelDensity


def limpieza_general():
    ind2004 = pd.read_stata('individual_t104.dta')
    ind2024 = pd.read_excel('usu_individual_T124.xlsx')
    ind2004.set_index('CODUSU', inplace=True)
    ind2024.set_index('CODUSU', inplace=True)
    ind2024 = ind2024.loc[:, ~ind2024.columns.str.contains("CH05")]
    ind2004.columns = ind2004.columns.str.upper()

    cols_2004 = set(ind2004.columns)
    cols_2024 = set(ind2024.columns)

    sobran_2004 = cols_2004 - cols_2024
    sobran_2024 = cols_2024 - cols_2004
    ind2004 = ind2004.drop(columns=sobran_2004)
    ind2024 = ind2024.drop(columns=sobran_2024)

    if ind2024.shape[1] == ind2004.shape[1]:
        print(
            f"Igual cantidad de columnas: {ind2004.shape[1]}")
    else:
        print(
            f'No son iguales: 2024: {ind2024.shape[1]}, 2004:{ind2004.shape[1]}')

    ind2024 = ind2024[ind2004.columns]

    base_completa = pd.concat([ind2004, ind2024], axis=0)
    variables_elegidas = ['ANO4', 'ESTADO', 'CH04', 'CH06', 'CH10', 'CH12', 'CH13', 'CH14', 'PP04A', 'PP04B_COD',
                          'PP07C', 'CAT_INAC', 'P21', 'PP3E_TOT', 'PP3F_TOT']
    base_completa = base_completa[variables_elegidas]
    base_completa.to_excel('BaseLimpiaEPH.xlsx', index=False)

    print("Archivo exportado a Excel.")


limpieza_general()


def limpieza_edad():
    ind2004 = pd.read_excel('BaseLimpiaEPH.xlsx')
    valores_unicos_2004 = ind2004['CH06'][~ind2004['CH06'].apply(
        lambda x: isinstance(x, (int, float)))].unique()
    print("Valores no numéricos únicos en CH06 (2004):")
    print(valores_unicos_2004)

    año2004 = ind2004['ANO4'] == 2004
    no_numeros = ind2004.loc[año2004, 'CH06'][~ind2004.loc[año2004, 'CH06']
                                              .apply(lambda x: isinstance(x, (int, float)))].unique()
    print("Valores no numéricos únicos en CH06 (2004):", no_numeros)

    reemplazos = {'Menos de 1 año': 1, '98 y más años': 99}
    series_2004 = ind2004.loc[año2004, 'CH06'].astype(str).replace(reemplazos)
    ind2004.loc[año2004, 'CH06'] = pd.to_numeric(series_2004, errors='coerce')

    print('Valores de edad corregidos solo para 2004.')
    ind2004.to_excel('BaseLimpiaEPH.xlsx', index=False)
    print('Archivo guardado')


limpieza_edad()


def limpieza_estado():
    Est = pd.read_excel('BaseLimpiaEPH.xlsx')

    valores_unicos_2004 = Est['ESTADO'][~Est['ESTADO'].apply(
        lambda x: isinstance(x, (int, float)))].unique()
    print(
        f"Valores no numéricos únicos en ESTADO (2004):{valores_unicos_2004}")

    Est['ESTADO'] = Est['ESTADO'].astype(str)
    Est['ESTADO'] = Est['ESTADO'].replace({
        'Ocupado': 1,
        'Desocupado': 2,
        'Inactivo': 3,
        'Menor de 10 años': 4,
        'Entrevista individual no realizada (no respuesta al cuestion': 0})
    Est['ESTADO'] = pd.to_numeric(Est['ESTADO'], errors='coerce')

    print(f'Valores en ESTADO 2004:{Est['ESTADO'].unique()}')
    print(f'Tipo de valores: {Est['ESTADO'].dtype}')

    Est.to_excel('BaseLimpiaEPH.xlsx', index=False)
    print('Limpieza guardada.')


limpieza_estado()

# Luego de la limpieza, realizamos lo pedido:


def edad2():
    var_nueva = pd.read_excel('BaseLimpiaEPH.xlsx')
    var_nueva['edad2'] = np.square(var_nueva['CH06'])
    var_nueva.to_excel('BaseLimpiaEPH.xlsx')
    print('Nueva variable edad2 añadida.')


edad2()


def histo_kernel():
    df = pd.read_excel('BaseLimpiaEPH.xlsx')

    # Variables Histograma.
    edades2004 = df.loc[df['ANO4'] == 2004, 'CH06']
    edades2024 = df.loc[df['ANO4'] == 2024, 'CH06']
    df2004 = pd.DataFrame({'CH06': edades2004, 'ANO4': '2004'})
    df2024 = pd.DataFrame({'CH06': edades2024, 'ANO4': '2024'})
    combinado_edades = pd.concat([df2004, df2024], ignore_index=True)
    promedio_2004 = edades2004.mean()
    promedio_2024 = edades2024.mean()

    # Figura.
    fig, axes = plt.subplots(1, 2, figsize=(10, 6))

    # Histograma.
    sns.histplot(data=combinado_edades, x='CH06', ax=axes[0], hue='ANO4', bins=25, multiple='stack', palette={
        '2004': '#5799c6', '2024': 'orange'})
    axes[0].set_title('Distribución de edad EPH 2004/2024')
    axes[0].set_xlabel('Edad')
    axes[0].set_ylabel('Frecuencia')
    axes[0].axvline(promedio_2004, linestyle='dashed',
                    linewidth=1, color='red')
    axes[0].axvline(promedio_2024, linestyle='dashed',
                    linewidth=1, color='green')
    axes[0].set_xticks(np.arange(0, 101, 10))
    parche_2004 = mpatches.Patch(color='#5799c6', label='2004')
    parche_2024 = mpatches.Patch(color='orange', label='2024')
    line_prom04 = Line2D([0], [0], color='red',
                         linestyle='--', label='Promedio 2004')
    line_prom24 = Line2D([0], [0], color='green',
                         linestyle='--', label='Promedio 2024')
    axes[0].legend(handles=[parche_2004, parche_2024, line_prom04,
                            line_prom24], title='Año y Promedios')

    # Kernels.
    ocu2004 = df.loc[(df['ESTADO'] == 1) & (
        df['ANO4'] == 2004), 'CH06']
    desoc2004 = df.loc[(df['ESTADO'] == 2) & (
        df['ANO4'] == 2004), 'CH06']
    ocu2024 = df.loc[(df['ESTADO'] == 1) & (
        df['ANO4'] == 2024), 'CH06']
    desoc2024 = df.loc[(df['ESTADO'] == 2) & (
        df['ANO4'] == 2024), 'CH06']
    sns.kdeplot(ocu2004, ax=axes[1], label='Ocupados 2004',
                fill=True, color='red', bw_method='scott')
    sns.kdeplot(desoc2004, ax=axes[1], label='Desocupados 2004',
                fill=True, color='grey', bw_method='scott')
    sns.kdeplot(ocu2024, ax=axes[1], label='Ocupados 2024',
                fill=True, color='green', bw_method='scott', linestyle='dashed')
    sns.kdeplot(desoc2024, ax=axes[1], label='Desocupados 2024',
                fill=True, color='grey', bw_method='scott', linestyle='dashed')
    axes[1].set_title('Estimación de Edad por Estado Laboral 2004/2024')
    axes[1].set_xlabel('Edad')
    axes[1].set_ylabel('Densidad estimada')
    axes[1].legend(title='Grupo')

    plt.tight_layout()
    plt.show()

histo_kernel()

def educ_limpieza():
    df = pd.read_excel('BaseLimpiaEPH.xlsx')
    df['CH10'] = df['CH10'].astype(str)
    df['CH10'] = df['CH10'].replace({
        'No asiste, pero asistió': 2,
        'Sí, asiste': 1,
        'Nunca asistió': 3,
        'Ns./Nr.': 9})
    df['CH10'] = pd.to_numeric(df['CH10'], errors='coerce')

    df['CH12'] = df['CH12'].astype(str).dropna()
    df['CH12'] = df['CH12'].replace({
        'Secundario': 4,
        'Primario': 2,
        'Universitario': 7,
        'Terciario': 6,
        'Jardín/Preescolar': 1,
        'Polimodal': 5,
        'EGB': 3,
        'Educación especial (discapacitado)': 9,
        'Ns./Nr.': 9,
        '99': 9})
    df['CH12'] = pd.to_numeric(df['CH12'], errors='coerce')

    df['CH13'] = df['CH13'].astype(str)
    df['CH13'] = df['CH13'].replace({
        'No': 2,
        'Sí': 1,
        'Ns./Nr.': 9})
    df['CH13'] = pd.to_numeric(df['CH13'], errors='coerce')

    df['CH14'] = df['CH14'].replace({i: f'0{i}' for i in range(0, 10)})
    df['CH14'] = pd.to_numeric(df['CH14'], errors='coerce')

    df = df.fillna(0)

    print(f'Valores en CH10:{df['CH10'].unique()}')
    print(f'Valores en CH12:{df['CH12'].unique()}')
    print(f'Valores en CH13:{df['CH13'].unique()}')
    print(f'Valores en CH14:{df['CH14'].unique()}')

    def educ(row):
        if row['CH10'] in [1, 2]:
            if row['CH12'] == 1:
                return row['CH14']
            elif row['CH12'] == 2:
                return 3 + row['CH14']
            elif row['CH12'] == 3:
                return 3 + row['CH14']
            elif row['CH12'] == 4:
                return 3 + 6 + row['CH14']
            elif row['CH12'] == 5:
                return 3 + 8 + row['CH14']
            elif row['CH12'] == 6:
                return 12 + row['CH14']
            elif row['CH12'] == 7:
                return 15 + row['CH14']
            elif row['CH12'] == 8:
                return 17 + row['CH14']
            elif row['CH12'] == 9:
                return 6
            else:
                return None
        elif row['CH10'] == 3:
            return 0
        else:
            return None

    df['educ'] = df.apply(educ, axis=1)
    df.to_excel('BaseLimpiaEPH.xlsx', index=False)
    print('Variable "educ" añadida.')


educ_limpieza()

