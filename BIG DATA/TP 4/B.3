    # Cross-validation.

    test_ocupados = test_combined[
        (test_combined['ESTADO'] == 1) &
        (test_combined[['SALARIO_SEMANAL', 'CH06', 'EDAD2',
         'EDUC', 'PP04A', 'PP03D']].notnull().all(axis=1))
    ].copy()
    test_ocupados['mujer'] = (test_ocupados['CH04'] == 2).astype(int)

    modelos = {
        'Modelo 1': ['CH06'],
        'Modelo 2': ['CH06', 'EDAD2'],
        'Modelo 3': ['CH06', 'EDAD2', 'EDUC'],
        'Modelo 4': ['CH06', 'EDAD2', 'EDUC', 'mujer'],
        'Modelo 5': ['CH06', 'EDAD2', 'EDUC', 'mujer', 'PP04A', 'PP03D']
    }
    resultados = {'MSE': {}, 'RMSE': {}, 'MAE': {}}
    for modelo, vars_indep in modelos.items():

        x = test_ocupados[vars_indep]
        y = test_ocupados['SALARIO_SEMANAL']

        lreg = LinearRegression()
        lreg.fit(x, y)

        y_pred = lreg.predict(x)

        mse = mean_squared_error(y, y_pred)
        rmse = np.sqrt(mse)
        mae = mean_absolute_error(y, y_pred)

        resultados['MSE'][modelo] = round(mse, 2)
        resultados['RMSE'][modelo] = round(rmse, 2)
        resultados['MAE'][modelo] = round(mae, 2)

    tabla_resultados = pd.DataFrame(resultados)
    # Transponer para tener métricas como filas
    tabla_resultados = tabla_resultados.T

    # Mostrar tabla
    print("\nTabla de resultados (métricas por fila):")
    print(tabla_resultados)
